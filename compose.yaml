# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # server:
  #   build:
  #     context: .
  #   environment:
  #     NODE_ENV: production
  #   ports:
  #     - 12000:12000

  nginx:
    container_name: reverse
    hostname: reverse
    restart: unless-stopped
    image: nginx:latest
    volumes:
      - 'nginx-config:/etc/nginx'
      - 'nginx-certs:/etc/ssl/private'
      - './config/default.conf:/etc/nginx/conf.d/default.conf'
      - '.cert/gitlab:/etc/ssl/private'
    ports:
      - 80:80
      - 443:443
    networks:
      - sonarnet

  jenkins:
    container_name: local_jenkins
    build:
      context: .
      dockerfile: .docker/jenkins/Dockerfile
    user: root
    restart: unless-stopped
    hostname: 'jenkins.example.com'
    ports:
      - "8080:8080"
      - '8443:8443'
      - '50000:50000'
    networks:
      - sonarnet
    volumes:
      - 'docker_sock:/var/run/docker.sock'
      - 'jenkins-docker-certs:/certs/client'
      - 'jenkins-data:/var/jenkins_home'
    environment:
      - "JENKINS_OPTS=--prefix=/jenkins"
      - "DOCKER_TLS_CERTDIR=/certs"

  gitlab:
    container_name: local_gitlab
    image: 'gitlab/gitlab-ce:latest'
    restart: unless-stopped
    hostname: 'gitlab.example.com'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://gitlab.example.com:10443'
        gitlab_rails['gitlab_shell_ssh_port'] = 10222
        letsencrypt['enable'] = false
        nginx['listen_https'] = true
        nginx['listen_port'] = 443
        nginx['redirect_http_to_https'] = true
        nginx['ssl_certificate'] = "/etc/gitlab/ssl/gitlab.example.com.crt"
        nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/gitlab.example.com.key"
        nginx['ssl_verify_client'] = "off"
        nginx['ssl_protocols'] = "TLSv1.1 TLSv1.2"
    ports:
      - '10080:10080'
      - '10443:443'
      - '10222:22'
    networks:
      - sonarnet
    volumes:
      - '.cert/gitlab:/etc/gitlab/ssl'
      - 'gitlab-config:/etc/gitlab'
      - 'gitlab-logs:/var/log/gitlab'
      - 'gitlab-data:/var/opt/gitlab'

  gitlab-runner:
    container_name: local_gitlabrunner
    image: 'gitlab/gitlab-runner:latest'
    restart: unless-stopped
    depends_on:
      - gitlab
    networks:
      - sonarnet
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'gitlab-runner-config:/etc/gitlab-runner'
      - '.cert/gitlab_runner:/usr/local/share/ca-certificates/'

  sonar:
    container_name: local_sonar
    image: sonarqube:lts-community
    depends_on:
      - postgressdb
    hostname: 'sonarqube.example.com'
    ports:
      - "9000:9000"
      - "9092:9092"
    networks:
      - sonarnet
    environment:
      - SONARQUBE_JDBC_USERNAME=$SONAR_JDBC_USER
      - SONARQUBE_JDBC_PASSWORD=$SONAR_JDBC_PASSWORD
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgressdb:5432/sonarqube
    volumes:
      - 'sonarqube_conf:/opt/sonarqube/conf'
      - 'sonarqube_data:/opt/sonarqube/data'
      - 'sonarqube_logs:/opt/sonarqube/logs'
      - 'sonarqube_extensions:/opt/sonarqube/extensions'
      - 'sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins'

  postgressdb:
    image: postgres:latest
    container_name: local_postgres
    restart: unless-stopped
    networks:
      - sonarnet
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    volumes:
      - 'postgresql_sonarqube_db:/var/lib/postgresql'
      - 'postgresql_postgresql_data:/var/lib/postgresql/data'

  mongodb:
    container_name: local_mongo
    image: mongo:latest
    env_file:
      - .env
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=$MONGO_DB
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASS
      - DB_HOST=$MONGO_HOST
      - DB_USER=$MONGO_USER
      - DB_PASSWORD=$MONGO_PASS
      - DB_NAME=$MONGO_DB
    command:
      mongod --quiet --logpath /dev/null

  redis:
    container_name: local_redis
    image: redis:latest
    restart: unless-stopped
    networks:
      - sonarnet
    ports:
      - "6379:6379"

  loki:
    container_name: local_loki
    image: grafana/loki:2.3.0
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - lokidata:/data/loki
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - loki

  prometheus:
    container_name: local_prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-admin-api
      - --web.enable-lifecycle
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
    - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - loki

  promtail:
    container_name: local_promtail
    image: grafana/promtail:2.3.0
    restart: unless-stopped
    ports:
      - "1514:1514"
      - "9080:9080"
    volumes:
      - ./config/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - loki

  grafana:
    container_name: local_grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "0"
    ports:
      - "3000:3000"
    volumes:
      - grafanadata:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
    networks:
      - loki

volumes:
  nginx-config: {}
  nginx-certs: {}
  docker_sock: {}
  jenkins-data: {}
  jenkins-docker-certs: {}
  gitlab-data: {}
  gitlab-logs: {}
  gitlab-config: {}
  gitlab-runner-config: {}
  sonarqube_conf: {}
  sonarqube_data: {}
  sonarqube_logs: {}
  sonarqube_extensions: {}
  sonarqube_bundled-plugins: {}
  postgresql_sonarqube_db: {}
  postgresql_postgresql_data: {}
  lokidata: {}
  grafanadata: {}

networks:
  loki:
  sonarnet:
    driver: bridge
