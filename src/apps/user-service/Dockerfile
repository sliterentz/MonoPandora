# This file is generated by Nx.
#
# Build the docker image with `npx nx docker-build user-service`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with `docker run -p 3000:3000 -t user-service`.
# Stage 1: Builder
FROM docker.io/node:lts-alpine AS builder

# ENV NODE_ENV production
# ENV HOST=0.0.0.0
# ENV PORT=5200

# Set the working directory inside the container
WORKDIR /usr/src/app

# Install pnpm globally
RUN npm install -g pnpm

# Copy the package.json and pnpm-lock.yaml files to install dependencies
COPY package.json pnpm-lock.yaml ./

# Install dependencies using pnpm
RUN pnpm install --frozen-lockfile

# Copy the rest of the monorepo code
COPY . .

# Build the application using nx with the webpack executor
RUN npx nx run user-service:build --prod

# Stage 2: Production
FROM docker.io/node:lts-alpine AS production

# Set environment variables
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=5200

# Create and set the working directory inside the container
WORKDIR /usr/src/app

# Create a non-root user
RUN addgroup --system user-service && \
    adduser --system -G user-service user-service

# Copy the .env file to the production stage
COPY .env .env

# Copy the built files from the builder stage
COPY --from=builder /usr/src/app/dist/apps/user-service/main.js ./user-service.js

# Copy the node_modules from the builder stage
COPY --from=builder /usr/src/app/node_modules ./node_modules

# Change ownership to the non-root user
RUN chown -R user-service:user-service .

# Expose the application port
EXPOSE 5200

# You can remove this install step if you build with `--bundle` option.
# The bundled output will include external dependencies.
# RUN npm --prefix user-service --omit=dev -f install

# Run the application
CMD ["node", "user-service.js"]
